server:
  port: 8080

spring:
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/book}
    username: ${DATABASE_USERNAME:user}
    password: ${DATABASE_PASSWORD:password}
  jpa:
    hibernate:
      ddl-auto: validate
  liquibase:
    enabled: true
    change-log: classpath:db/db.changelog-master.yaml
    liquibase-schema: public
    user: ${DATABASE_USERNAME:user}
    password: ${DATABASE_PASSWORD:password}
  kafka:
    properties:
      security:
        protocol: "PLAINTEXT"
    bootstrap-servers: ${KAFKA_CONNECT:http\://localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      compression-type: gzip
    consumer:
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      auto-offset-reset: latest
      group-id: book-service
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.test.books.*
        max.poll.records: 100

topic:
  books-create: ${TOPIC_BOOKS_CREATE:books.create}

logging:
  level:
    org.zalando.logbook: TRACE
  pattern:
    console: "\n%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId:-}, %X{spanId:-}] %highlight(%-5level) %logger{36} \u001b[34m-\u001b[0m %msg%n"

logbook:
  format.style: json
  obfuscate:
    headers:
      - Authorization
    parameters:
      - access_token
  exclude:
    - /swagger-ui/**
    - /v3/api-docs/**